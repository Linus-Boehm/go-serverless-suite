// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package itf is a generated GoMock package.
package itf

import (
	entity "github.com/Linus-Boehm/go-serverless-suite/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTenantProvider is a mock of TenantProvider interface
type MockTenantProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTenantProviderMockRecorder
}

// MockTenantProviderMockRecorder is the mock recorder for MockTenantProvider
type MockTenantProviderMockRecorder struct {
	mock *MockTenantProvider
}

// NewMockTenantProvider creates a new mock instance
func NewMockTenantProvider(ctrl *gomock.Controller) *MockTenantProvider {
	mock := &MockTenantProvider{ctrl: ctrl}
	mock.recorder = &MockTenantProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTenantProvider) EXPECT() *MockTenantProviderMockRecorder {
	return m.recorder
}

// MockTenantServicer is a mock of TenantServicer interface
type MockTenantServicer struct {
	ctrl     *gomock.Controller
	recorder *MockTenantServicerMockRecorder
}

// MockTenantServicerMockRecorder is the mock recorder for MockTenantServicer
type MockTenantServicerMockRecorder struct {
	mock *MockTenantServicer
}

// NewMockTenantServicer creates a new mock instance
func NewMockTenantServicer(ctrl *gomock.Controller) *MockTenantServicer {
	mock := &MockTenantServicer{ctrl: ctrl}
	mock.recorder = &MockTenantServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTenantServicer) EXPECT() *MockTenantServicerMockRecorder {
	return m.recorder
}

// MockUserServicer is a mock of UserServicer interface
type MockUserServicer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServicerMockRecorder
}

// MockUserServicerMockRecorder is the mock recorder for MockUserServicer
type MockUserServicerMockRecorder struct {
	mock *MockUserServicer
}

// NewMockUserServicer creates a new mock instance
func NewMockUserServicer(ctrl *gomock.Controller) *MockUserServicer {
	mock := &MockUserServicer{ctrl: ctrl}
	mock.recorder = &MockUserServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserServicer) EXPECT() *MockUserServicerMockRecorder {
	return m.recorder
}

// CreateNewUser mocks base method
func (m *MockUserServicer) CreateNewUser(user entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", user)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewUser indicates an expected call of CreateNewUser
func (mr *MockUserServicerMockRecorder) CreateNewUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockUserServicer)(nil).CreateNewUser), user)
}

// MockUserProvider is a mock of UserProvider interface
type MockUserProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUserProviderMockRecorder
}

// MockUserProviderMockRecorder is the mock recorder for MockUserProvider
type MockUserProviderMockRecorder struct {
	mock *MockUserProvider
}

// NewMockUserProvider creates a new mock instance
func NewMockUserProvider(ctrl *gomock.Controller) *MockUserProvider {
	mock := &MockUserProvider{ctrl: ctrl}
	mock.recorder = &MockUserProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserProvider) EXPECT() *MockUserProviderMockRecorder {
	return m.recorder
}

// ReadUser mocks base method
func (m *MockUserProvider) ReadUser(id entity.ID) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUser", id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUser indicates an expected call of ReadUser
func (mr *MockUserProviderMockRecorder) ReadUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUser", reflect.TypeOf((*MockUserProvider)(nil).ReadUser), id)
}

// ReadUserByEmail mocks base method
func (m *MockUserProvider) ReadUserByEmail(email entity.ID) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserByEmail", email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserByEmail indicates an expected call of ReadUserByEmail
func (mr *MockUserProviderMockRecorder) ReadUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserByEmail", reflect.TypeOf((*MockUserProvider)(nil).ReadUserByEmail), email)
}

// PutUser mocks base method
func (m *MockUserProvider) PutUser(user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutUser indicates an expected call of PutUser
func (mr *MockUserProviderMockRecorder) PutUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutUser", reflect.TypeOf((*MockUserProvider)(nil).PutUser), user)
}

// DeleteUser mocks base method
func (m *MockUserProvider) DeleteUser(id entity.ID, email string, soft bool) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id, email, soft)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockUserProviderMockRecorder) DeleteUser(id, email, soft interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserProvider)(nil).DeleteUser), id, email, soft)
}

// ListUsers mocks base method
func (m *MockUserProvider) ListUsers() ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers")
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers
func (mr *MockUserProviderMockRecorder) ListUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUserProvider)(nil).ListUsers))
}
