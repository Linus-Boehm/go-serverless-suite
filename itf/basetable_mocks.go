// Code generated by MockGen. DO NOT EDIT.
// Source: basetable.go

// Package itf is a generated GoMock package.
package itf

import (
	fmt "fmt"
	entity "github.com/Linus-Boehm/go-serverless-suite/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBaseTableProvider is a mock of BaseTableProvider interface
type MockBaseTableProvider struct {
	ctrl     *gomock.Controller
	recorder *MockBaseTableProviderMockRecorder
}

// MockBaseTableProviderMockRecorder is the mock recorder for MockBaseTableProvider
type MockBaseTableProviderMockRecorder struct {
	mock *MockBaseTableProvider
}

// NewMockBaseTableProvider creates a new mock instance
func NewMockBaseTableProvider(ctrl *gomock.Controller) *MockBaseTableProvider {
	mock := &MockBaseTableProvider{ctrl: ctrl}
	mock.recorder = &MockBaseTableProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBaseTableProvider) EXPECT() *MockBaseTableProviderMockRecorder {
	return m.recorder
}

// PutItem mocks base method
func (m *MockBaseTableProvider) PutItem(row DBKeyer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutItem", row)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutItem indicates an expected call of PutItem
func (mr *MockBaseTableProviderMockRecorder) PutItem(row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItem", reflect.TypeOf((*MockBaseTableProvider)(nil).PutItem), row)
}

// RemoveItem mocks base method
func (m *MockBaseTableProvider) RemoveItem(key, item DBKeyer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItem", key, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItem indicates an expected call of RemoveItem
func (mr *MockBaseTableProviderMockRecorder) RemoveItem(key, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItem", reflect.TypeOf((*MockBaseTableProvider)(nil).RemoveItem), key, item)
}

// RemoveItemSoft mocks base method
func (m *MockBaseTableProvider) RemoveItemSoft(key DBKeyer, item DeletableKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItemSoft", key, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItemSoft indicates an expected call of RemoveItemSoft
func (mr *MockBaseTableProviderMockRecorder) RemoveItemSoft(key, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItemSoft", reflect.TypeOf((*MockBaseTableProvider)(nil).RemoveItemSoft), key, item)
}

// RemoveMainEntity mocks base method
func (m *MockBaseTableProvider) RemoveMainEntity(entity, id fmt.Stringer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMainEntity", entity, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMainEntity indicates an expected call of RemoveMainEntity
func (mr *MockBaseTableProviderMockRecorder) RemoveMainEntity(entity, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMainEntity", reflect.TypeOf((*MockBaseTableProvider)(nil).RemoveMainEntity), entity, id)
}

// ReadItem mocks base method
func (m *MockBaseTableProvider) ReadItem(key, row DBKeyer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadItem", key, row)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadItem indicates an expected call of ReadItem
func (mr *MockBaseTableProviderMockRecorder) ReadItem(key, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadItem", reflect.TypeOf((*MockBaseTableProvider)(nil).ReadItem), key, row)
}

// ReadAllWithPK mocks base method
func (m *MockBaseTableProvider) ReadAllWithPK(key fmt.Stringer, index *entity.TableIndex, entity fmt.Stringer, rows interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllWithPK", key, index, entity, rows)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadAllWithPK indicates an expected call of ReadAllWithPK
func (mr *MockBaseTableProviderMockRecorder) ReadAllWithPK(key, index, entity, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllWithPK", reflect.TypeOf((*MockBaseTableProvider)(nil).ReadAllWithPK), key, index, entity, rows)
}

// ReadItemFromIndex mocks base method
func (m *MockBaseTableProvider) ReadItemFromIndex(key DBKeyer, index *entity.TableIndex, row DBKeyer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadItemFromIndex", key, index, row)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadItemFromIndex indicates an expected call of ReadItemFromIndex
func (mr *MockBaseTableProviderMockRecorder) ReadItemFromIndex(key, index, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadItemFromIndex", reflect.TypeOf((*MockBaseTableProvider)(nil).ReadItemFromIndex), key, index, row)
}

// GetEntity mocks base method
func (m *MockBaseTableProvider) GetEntity(entityIndex entity.TableIndex, entity fmt.Stringer, rows interface{}, withDeleted bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntity", entityIndex, entity, rows, withDeleted)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEntity indicates an expected call of GetEntity
func (mr *MockBaseTableProviderMockRecorder) GetEntity(entityIndex, entity, rows, withDeleted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockBaseTableProvider)(nil).GetEntity), entityIndex, entity, rows, withDeleted)
}

// DeleteTable mocks base method
func (m *MockBaseTableProvider) DeleteTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTable indicates an expected call of DeleteTable
func (mr *MockBaseTableProviderMockRecorder) DeleteTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTable", reflect.TypeOf((*MockBaseTableProvider)(nil).DeleteTable))
}

// TranslateDBError mocks base method
func (m *MockBaseTableProvider) TranslateDBError(err error, entity, id fmt.Stringer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateDBError", err, entity, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TranslateDBError indicates an expected call of TranslateDBError
func (mr *MockBaseTableProviderMockRecorder) TranslateDBError(err, entity, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateDBError", reflect.TypeOf((*MockBaseTableProvider)(nil).TranslateDBError), err, entity, id)
}

// BatchReadItems mocks base method
func (m *MockBaseTableProvider) BatchReadItems(keys []DBKeyer, rows interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchReadItems", keys, rows)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchReadItems indicates an expected call of BatchReadItems
func (mr *MockBaseTableProviderMockRecorder) BatchReadItems(keys, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchReadItems", reflect.TypeOf((*MockBaseTableProvider)(nil).BatchReadItems), keys, rows)
}

// BatchWriteItems mocks base method
func (m *MockBaseTableProvider) BatchWriteItems(rows ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range rows {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchWriteItems", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchWriteItems indicates an expected call of BatchWriteItems
func (mr *MockBaseTableProviderMockRecorder) BatchWriteItems(rows ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchWriteItems", reflect.TypeOf((*MockBaseTableProvider)(nil).BatchWriteItems), rows...)
}

// WithIndex mocks base method
func (m *MockBaseTableProvider) WithIndex(index entity.TableIndex) BaseTableProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithIndex", index)
	ret0, _ := ret[0].(BaseTableProvider)
	return ret0
}

// WithIndex indicates an expected call of WithIndex
func (mr *MockBaseTableProviderMockRecorder) WithIndex(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithIndex", reflect.TypeOf((*MockBaseTableProvider)(nil).WithIndex), index)
}

// WithDefaultIndices mocks base method
func (m *MockBaseTableProvider) WithDefaultIndices() BaseTableProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDefaultIndices")
	ret0, _ := ret[0].(BaseTableProvider)
	return ret0
}

// WithDefaultIndices indicates an expected call of WithDefaultIndices
func (mr *MockBaseTableProviderMockRecorder) WithDefaultIndices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDefaultIndices", reflect.TypeOf((*MockBaseTableProvider)(nil).WithDefaultIndices))
}

// BatchDeleteItems mocks base method
func (m *MockBaseTableProvider) BatchDeleteItems(rows []DBKeyer) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteItems", rows)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteItems indicates an expected call of BatchDeleteItems
func (mr *MockBaseTableProviderMockRecorder) BatchDeleteItems(rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteItems", reflect.TypeOf((*MockBaseTableProvider)(nil).BatchDeleteItems), rows)
}

// MockDBKeyer is a mock of DBKeyer interface
type MockDBKeyer struct {
	ctrl     *gomock.Controller
	recorder *MockDBKeyerMockRecorder
}

// MockDBKeyerMockRecorder is the mock recorder for MockDBKeyer
type MockDBKeyerMockRecorder struct {
	mock *MockDBKeyer
}

// NewMockDBKeyer creates a new mock instance
func NewMockDBKeyer(ctrl *gomock.Controller) *MockDBKeyer {
	mock := &MockDBKeyer{ctrl: ctrl}
	mock.recorder = &MockDBKeyerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBKeyer) EXPECT() *MockDBKeyerMockRecorder {
	return m.recorder
}

// GetPK mocks base method
func (m *MockDBKeyer) GetPK() fmt.Stringer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPK")
	ret0, _ := ret[0].(fmt.Stringer)
	return ret0
}

// GetPK indicates an expected call of GetPK
func (mr *MockDBKeyerMockRecorder) GetPK() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPK", reflect.TypeOf((*MockDBKeyer)(nil).GetPK))
}

// GetSK mocks base method
func (m *MockDBKeyer) GetSK() fmt.Stringer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSK")
	ret0, _ := ret[0].(fmt.Stringer)
	return ret0
}

// GetSK indicates an expected call of GetSK
func (mr *MockDBKeyerMockRecorder) GetSK() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSK", reflect.TypeOf((*MockDBKeyer)(nil).GetSK))
}

// GetEntity mocks base method
func (m *MockDBKeyer) GetEntity() fmt.Stringer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntity")
	ret0, _ := ret[0].(fmt.Stringer)
	return ret0
}

// GetEntity indicates an expected call of GetEntity
func (mr *MockDBKeyerMockRecorder) GetEntity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockDBKeyer)(nil).GetEntity))
}

// MockDeletableKey is a mock of DeletableKey interface
type MockDeletableKey struct {
	ctrl     *gomock.Controller
	recorder *MockDeletableKeyMockRecorder
}

// MockDeletableKeyMockRecorder is the mock recorder for MockDeletableKey
type MockDeletableKeyMockRecorder struct {
	mock *MockDeletableKey
}

// NewMockDeletableKey creates a new mock instance
func NewMockDeletableKey(ctrl *gomock.Controller) *MockDeletableKey {
	mock := &MockDeletableKey{ctrl: ctrl}
	mock.recorder = &MockDeletableKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeletableKey) EXPECT() *MockDeletableKeyMockRecorder {
	return m.recorder
}

// GetPK mocks base method
func (m *MockDeletableKey) GetPK() fmt.Stringer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPK")
	ret0, _ := ret[0].(fmt.Stringer)
	return ret0
}

// GetPK indicates an expected call of GetPK
func (mr *MockDeletableKeyMockRecorder) GetPK() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPK", reflect.TypeOf((*MockDeletableKey)(nil).GetPK))
}

// GetSK mocks base method
func (m *MockDeletableKey) GetSK() fmt.Stringer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSK")
	ret0, _ := ret[0].(fmt.Stringer)
	return ret0
}

// GetSK indicates an expected call of GetSK
func (mr *MockDeletableKeyMockRecorder) GetSK() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSK", reflect.TypeOf((*MockDeletableKey)(nil).GetSK))
}

// GetEntity mocks base method
func (m *MockDeletableKey) GetEntity() fmt.Stringer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntity")
	ret0, _ := ret[0].(fmt.Stringer)
	return ret0
}

// GetEntity indicates an expected call of GetEntity
func (mr *MockDeletableKeyMockRecorder) GetEntity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockDeletableKey)(nil).GetEntity))
}

// IsDeleted mocks base method
func (m *MockDeletableKey) IsDeleted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDeleted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDeleted indicates an expected call of IsDeleted
func (mr *MockDeletableKeyMockRecorder) IsDeleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDeleted", reflect.TypeOf((*MockDeletableKey)(nil).IsDeleted))
}

// SoftDeleteNow mocks base method
func (m *MockDeletableKey) SoftDeleteNow() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SoftDeleteNow")
}

// SoftDeleteNow indicates an expected call of SoftDeleteNow
func (mr *MockDeletableKeyMockRecorder) SoftDeleteNow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteNow", reflect.TypeOf((*MockDeletableKey)(nil).SoftDeleteNow))
}
