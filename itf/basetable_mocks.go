// Code generated by MockGen. DO NOT EDIT.
// Source: basetable.go

// Package itf is a generated GoMock package.
package itf

import (
	fmt "fmt"
	entity "github.com/Linus-Boehm/go-serverless-suite/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBaseTableProvider is a mock of BaseTableProvider interface
type MockBaseTableProvider struct {
	ctrl     *gomock.Controller
	recorder *MockBaseTableProviderMockRecorder
}

// MockBaseTableProviderMockRecorder is the mock recorder for MockBaseTableProvider
type MockBaseTableProviderMockRecorder struct {
	mock *MockBaseTableProvider
}

// NewMockBaseTableProvider creates a new mock instance
func NewMockBaseTableProvider(ctrl *gomock.Controller) *MockBaseTableProvider {
	mock := &MockBaseTableProvider{ctrl: ctrl}
	mock.recorder = &MockBaseTableProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBaseTableProvider) EXPECT() *MockBaseTableProviderMockRecorder {
	return m.recorder
}

// PutItem mocks base method
func (m *MockBaseTableProvider) PutItem(row entity.DBProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutItem", row)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutItem indicates an expected call of PutItem
func (mr *MockBaseTableProviderMockRecorder) PutItem(row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItem", reflect.TypeOf((*MockBaseTableProvider)(nil).PutItem), row)
}

// RemoveItem mocks base method
func (m *MockBaseTableProvider) RemoveItem(key entity.DBKeyer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItem", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItem indicates an expected call of RemoveItem
func (mr *MockBaseTableProviderMockRecorder) RemoveItem(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItem", reflect.TypeOf((*MockBaseTableProvider)(nil).RemoveItem), key)
}

// RemoveMainEntity mocks base method
func (m *MockBaseTableProvider) RemoveMainEntity(entity, id fmt.Stringer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMainEntity", entity, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMainEntity indicates an expected call of RemoveMainEntity
func (mr *MockBaseTableProviderMockRecorder) RemoveMainEntity(entity, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMainEntity", reflect.TypeOf((*MockBaseTableProvider)(nil).RemoveMainEntity), entity, id)
}

// ReadItem mocks base method
func (m *MockBaseTableProvider) ReadItem(key entity.DBKeyer, row *entity.DBProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadItem", key, row)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadItem indicates an expected call of ReadItem
func (mr *MockBaseTableProviderMockRecorder) ReadItem(key, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadItem", reflect.TypeOf((*MockBaseTableProvider)(nil).ReadItem), key, row)
}

// ReadAllWithPK mocks base method
func (m *MockBaseTableProvider) ReadAllWithPK(key entity.DBKeyer, index *entity.TableIndex, rows *[]entity.DBProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllWithPK", key, index, rows)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadAllWithPK indicates an expected call of ReadAllWithPK
func (mr *MockBaseTableProviderMockRecorder) ReadAllWithPK(key, index, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllWithPK", reflect.TypeOf((*MockBaseTableProvider)(nil).ReadAllWithPK), key, index, rows)
}

// ReadItemFromIndex mocks base method
func (m *MockBaseTableProvider) ReadItemFromIndex(key entity.DBKeyer, index *entity.TableIndex, row *entity.DBProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadItemFromIndex", key, index, row)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadItemFromIndex indicates an expected call of ReadItemFromIndex
func (mr *MockBaseTableProviderMockRecorder) ReadItemFromIndex(key, index, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadItemFromIndex", reflect.TypeOf((*MockBaseTableProvider)(nil).ReadItemFromIndex), key, index, row)
}

// GetEntity mocks base method
func (m *MockBaseTableProvider) GetEntity(entityIndex entity.TableIndex, entity fmt.Stringer, rows *[]entity.DBProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntity", entityIndex, entity, rows)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEntity indicates an expected call of GetEntity
func (mr *MockBaseTableProviderMockRecorder) GetEntity(entityIndex, entity, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockBaseTableProvider)(nil).GetEntity), entityIndex, entity, rows)
}

// DeleteTable mocks base method
func (m *MockBaseTableProvider) DeleteTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTable indicates an expected call of DeleteTable
func (mr *MockBaseTableProviderMockRecorder) DeleteTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTable", reflect.TypeOf((*MockBaseTableProvider)(nil).DeleteTable))
}

// TranslateDBError mocks base method
func (m *MockBaseTableProvider) TranslateDBError(err error, entity, id fmt.Stringer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateDBError", err, entity, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TranslateDBError indicates an expected call of TranslateDBError
func (mr *MockBaseTableProviderMockRecorder) TranslateDBError(err, entity, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateDBError", reflect.TypeOf((*MockBaseTableProvider)(nil).TranslateDBError), err, entity, id)
}

// BatchReadItems mocks base method
func (m *MockBaseTableProvider) BatchReadItems(keys []entity.DBKeyer, rows *[]entity.DBProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchReadItems", keys, rows)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchReadItems indicates an expected call of BatchReadItems
func (mr *MockBaseTableProviderMockRecorder) BatchReadItems(keys, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchReadItems", reflect.TypeOf((*MockBaseTableProvider)(nil).BatchReadItems), keys, rows)
}

// BatchWriteItems mocks base method
func (m *MockBaseTableProvider) BatchWriteItems(rows []entity.DBProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchWriteItems", rows)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchWriteItems indicates an expected call of BatchWriteItems
func (mr *MockBaseTableProviderMockRecorder) BatchWriteItems(rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchWriteItems", reflect.TypeOf((*MockBaseTableProvider)(nil).BatchWriteItems), rows)
}

// WithIndex mocks base method
func (m *MockBaseTableProvider) WithIndex(index entity.TableIndex) BaseTableProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithIndex", index)
	ret0, _ := ret[0].(BaseTableProvider)
	return ret0
}

// WithIndex indicates an expected call of WithIndex
func (mr *MockBaseTableProviderMockRecorder) WithIndex(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithIndex", reflect.TypeOf((*MockBaseTableProvider)(nil).WithIndex), index)
}

// BatchDeleteItems mocks base method
func (m *MockBaseTableProvider) BatchDeleteItems(rows []entity.DBProvider) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteItems", rows)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteItems indicates an expected call of BatchDeleteItems
func (mr *MockBaseTableProviderMockRecorder) BatchDeleteItems(rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteItems", reflect.TypeOf((*MockBaseTableProvider)(nil).BatchDeleteItems), rows)
}
